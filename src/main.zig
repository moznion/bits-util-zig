const std = @import("std");
const testing = std.testing;

export fn rotateLeft8(x: u8, k: isize) u8 {
    if (k == 0) {
        return x;
    }
    const n = 7;
    const s = @intCast(u3, k & n);
    return x << s | ((x >> (n - s)) >> 1);
}

export fn rotateLeft16(x: u16, k: isize) u16 {
    if (k == 0) {
        return x;
    }
    const n = 15;
    const s = @intCast(u4, k & n);
    return x << s | ((x >> (n - s)) >> 1);
}

export fn rotateLeft32(x: u32, k: isize) u32 {
    if (k == 0) {
        return x;
    }
    const n = 31;
    const s = @intCast(u5, k & n);
    return x << s | ((x >> (n - s)) >> 1);
}

export fn rotateLeft64(x: u64, k: isize) u64 {
    if (k == 0) {
        return x;
    }
    const n = 63;
    const s = @intCast(u6, k & n);
    return x << s | ((x >> (n - s)) >> 1);
}

test "rotation to left for u8 bits" {
    try testing.expect(rotateLeft8(0b00001111, 0) == 0b00001111);
    try testing.expect(rotateLeft8(0b00001111, 1) == 0b00011110);
    try testing.expect(rotateLeft8(0b00001111, 2) == 0b00111100);
    try testing.expect(rotateLeft8(0b00001111, 3) == 0b01111000);
    try testing.expect(rotateLeft8(0b00001111, 4) == 0b11110000);
    try testing.expect(rotateLeft8(0b00001111, 5) == 0b11100001);
    try testing.expect(rotateLeft8(0b00001111, 6) == 0b11000011);
    try testing.expect(rotateLeft8(0b00001111, 7) == 0b10000111);
    try testing.expect(rotateLeft8(0b00001111, 8) == 0b00001111);
}

test "rotation to right for u8 bits" {
    try testing.expect(rotateLeft8(0b00001111, -1) == 0b10000111);
    try testing.expect(rotateLeft8(0b00001111, -2) == 0b11000011);
    try testing.expect(rotateLeft8(0b00001111, -3) == 0b11100001);
    try testing.expect(rotateLeft8(0b00001111, -4) == 0b11110000);
    try testing.expect(rotateLeft8(0b00001111, -5) == 0b01111000);
    try testing.expect(rotateLeft8(0b00001111, -6) == 0b00111100);
    try testing.expect(rotateLeft8(0b00001111, -7) == 0b00011110);
    try testing.expect(rotateLeft8(0b00001111, -8) == 0b00001111);
}

test "rotation to left for u16 bits" {
    try testing.expect(rotateLeft16(0b0000000011111111, 0) == 0b0000000011111111);
    try testing.expect(rotateLeft16(0b0000000011111111, 1) == 0b0000000111111110);
    try testing.expect(rotateLeft16(0b0000000011111111, 2) == 0b0000001111111100);
    try testing.expect(rotateLeft16(0b0000000011111111, 3) == 0b0000011111111000);
    try testing.expect(rotateLeft16(0b0000000011111111, 4) == 0b0000111111110000);
    try testing.expect(rotateLeft16(0b0000000011111111, 5) == 0b0001111111100000);
    try testing.expect(rotateLeft16(0b0000000011111111, 6) == 0b0011111111000000);
    try testing.expect(rotateLeft16(0b0000000011111111, 7) == 0b0111111110000000);
    try testing.expect(rotateLeft16(0b0000000011111111, 8) == 0b1111111100000000);
    try testing.expect(rotateLeft16(0b0000000011111111, 9) == 0b1111111000000001);
    try testing.expect(rotateLeft16(0b0000000011111111, 10) == 0b1111110000000011);
    try testing.expect(rotateLeft16(0b0000000011111111, 11) == 0b1111100000000111);
    try testing.expect(rotateLeft16(0b0000000011111111, 12) == 0b1111000000001111);
    try testing.expect(rotateLeft16(0b0000000011111111, 13) == 0b1110000000011111);
    try testing.expect(rotateLeft16(0b0000000011111111, 14) == 0b1100000000111111);
    try testing.expect(rotateLeft16(0b0000000011111111, 15) == 0b1000000001111111);
    try testing.expect(rotateLeft16(0b0000000011111111, 16) == 0b0000000011111111);
}

test "rotation to right for u16 bits" {
    try testing.expect(rotateLeft16(0b0000000011111111, -1) == 0b1000000001111111);
    try testing.expect(rotateLeft16(0b0000000011111111, -2) == 0b1100000000111111);
    try testing.expect(rotateLeft16(0b0000000011111111, -3) == 0b1110000000011111);
    try testing.expect(rotateLeft16(0b0000000011111111, -4) == 0b1111000000001111);
    try testing.expect(rotateLeft16(0b0000000011111111, -5) == 0b1111100000000111);
    try testing.expect(rotateLeft16(0b0000000011111111, -6) == 0b1111110000000011);
    try testing.expect(rotateLeft16(0b0000000011111111, -7) == 0b1111111000000001);
    try testing.expect(rotateLeft16(0b0000000011111111, -8) == 0b1111111100000000);
    try testing.expect(rotateLeft16(0b0000000011111111, -9) == 0b0111111110000000);
    try testing.expect(rotateLeft16(0b0000000011111111, -10) == 0b0011111111000000);
    try testing.expect(rotateLeft16(0b0000000011111111, -11) == 0b0001111111100000);
    try testing.expect(rotateLeft16(0b0000000011111111, -12) == 0b0000111111110000);
    try testing.expect(rotateLeft16(0b0000000011111111, -13) == 0b0000011111111000);
    try testing.expect(rotateLeft16(0b0000000011111111, -14) == 0b0000001111111100);
    try testing.expect(rotateLeft16(0b0000000011111111, -15) == 0b0000000111111110);
    try testing.expect(rotateLeft16(0b0000000011111111, -16) == 0b0000000011111111);
}

test "rotation to left for u32 bits" {
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 0) == 0b00000000000000001111111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 1) == 0b00000000000000011111111111111110);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 2) == 0b00000000000000111111111111111100);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 3) == 0b00000000000001111111111111111000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 4) == 0b00000000000011111111111111110000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 5) == 0b00000000000111111111111111100000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 6) == 0b00000000001111111111111111000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 7) == 0b00000000011111111111111110000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 8) == 0b00000000111111111111111100000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 9) == 0b00000001111111111111111000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 10) == 0b00000011111111111111110000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 11) == 0b00000111111111111111100000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 12) == 0b00001111111111111111000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 13) == 0b00011111111111111110000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 14) == 0b00111111111111111100000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 15) == 0b01111111111111111000000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 16) == 0b11111111111111110000000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 17) == 0b11111111111111100000000000000001);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 18) == 0b11111111111111000000000000000011);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 19) == 0b11111111111110000000000000000111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 20) == 0b11111111111100000000000000001111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 21) == 0b11111111111000000000000000011111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 22) == 0b11111111110000000000000000111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 23) == 0b11111111100000000000000001111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 24) == 0b11111111000000000000000011111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 25) == 0b11111110000000000000000111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 26) == 0b11111100000000000000001111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 27) == 0b11111000000000000000011111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 28) == 0b11110000000000000000111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 29) == 0b11100000000000000001111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 30) == 0b11000000000000000011111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 31) == 0b10000000000000000111111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, 32) == 0b00000000000000001111111111111111);
}

test "rotation to right for u32 bits" {
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -1) == 0b10000000000000000111111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -2) == 0b11000000000000000011111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -3) == 0b11100000000000000001111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -4) == 0b11110000000000000000111111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -5) == 0b11111000000000000000011111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -6) == 0b11111100000000000000001111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -7) == 0b11111110000000000000000111111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -8) == 0b11111111000000000000000011111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -9) == 0b11111111100000000000000001111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -10) == 0b11111111110000000000000000111111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -11) == 0b11111111111000000000000000011111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -12) == 0b11111111111100000000000000001111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -13) == 0b11111111111110000000000000000111);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -14) == 0b11111111111111000000000000000011);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -15) == 0b11111111111111100000000000000001);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -16) == 0b11111111111111110000000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -17) == 0b01111111111111111000000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -18) == 0b00111111111111111100000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -19) == 0b00011111111111111110000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -20) == 0b00001111111111111111000000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -21) == 0b00000111111111111111100000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -22) == 0b00000011111111111111110000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -23) == 0b00000001111111111111111000000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -24) == 0b00000000111111111111111100000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -25) == 0b00000000011111111111111110000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -26) == 0b00000000001111111111111111000000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -27) == 0b00000000000111111111111111100000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -28) == 0b00000000000011111111111111110000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -29) == 0b00000000000001111111111111111000);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -30) == 0b00000000000000111111111111111100);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -31) == 0b00000000000000011111111111111110);
    try testing.expect(rotateLeft32(0b00000000000000001111111111111111, -32) == 0b00000000000000001111111111111111);
}

test "rotation to left for u64 bits" {
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 0) == 0b0000000000000000000000000000000011111111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 1) == 0b0000000000000000000000000000000111111111111111111111111111111110);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 2) == 0b0000000000000000000000000000001111111111111111111111111111111100);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 3) == 0b0000000000000000000000000000011111111111111111111111111111111000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 4) == 0b0000000000000000000000000000111111111111111111111111111111110000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 5) == 0b0000000000000000000000000001111111111111111111111111111111100000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 6) == 0b0000000000000000000000000011111111111111111111111111111111000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 7) == 0b0000000000000000000000000111111111111111111111111111111110000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 8) == 0b0000000000000000000000001111111111111111111111111111111100000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 9) == 0b0000000000000000000000011111111111111111111111111111111000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 10) == 0b0000000000000000000000111111111111111111111111111111110000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 11) == 0b0000000000000000000001111111111111111111111111111111100000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 12) == 0b0000000000000000000011111111111111111111111111111111000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 13) == 0b0000000000000000000111111111111111111111111111111110000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 14) == 0b0000000000000000001111111111111111111111111111111100000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 15) == 0b0000000000000000011111111111111111111111111111111000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 16) == 0b0000000000000000111111111111111111111111111111110000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 17) == 0b0000000000000001111111111111111111111111111111100000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 18) == 0b0000000000000011111111111111111111111111111111000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 19) == 0b0000000000000111111111111111111111111111111110000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 20) == 0b0000000000001111111111111111111111111111111100000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 21) == 0b0000000000011111111111111111111111111111111000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 22) == 0b0000000000111111111111111111111111111111110000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 23) == 0b0000000001111111111111111111111111111111100000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 24) == 0b0000000011111111111111111111111111111111000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 25) == 0b0000000111111111111111111111111111111110000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 26) == 0b0000001111111111111111111111111111111100000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 27) == 0b0000011111111111111111111111111111111000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 28) == 0b0000111111111111111111111111111111110000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 29) == 0b0001111111111111111111111111111111100000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 30) == 0b0011111111111111111111111111111111000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 31) == 0b0111111111111111111111111111111110000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 32) == 0b1111111111111111111111111111111100000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 33) == 0b1111111111111111111111111111111000000000000000000000000000000001);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 34) == 0b1111111111111111111111111111110000000000000000000000000000000011);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 35) == 0b1111111111111111111111111111100000000000000000000000000000000111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 36) == 0b1111111111111111111111111111000000000000000000000000000000001111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 37) == 0b1111111111111111111111111110000000000000000000000000000000011111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 38) == 0b1111111111111111111111111100000000000000000000000000000000111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 39) == 0b1111111111111111111111111000000000000000000000000000000001111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 40) == 0b1111111111111111111111110000000000000000000000000000000011111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 41) == 0b1111111111111111111111100000000000000000000000000000000111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 42) == 0b1111111111111111111111000000000000000000000000000000001111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 43) == 0b1111111111111111111110000000000000000000000000000000011111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 44) == 0b1111111111111111111100000000000000000000000000000000111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 45) == 0b1111111111111111111000000000000000000000000000000001111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 46) == 0b1111111111111111110000000000000000000000000000000011111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 47) == 0b1111111111111111100000000000000000000000000000000111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 48) == 0b1111111111111111000000000000000000000000000000001111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 49) == 0b1111111111111110000000000000000000000000000000011111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 50) == 0b1111111111111100000000000000000000000000000000111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 51) == 0b1111111111111000000000000000000000000000000001111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 52) == 0b1111111111110000000000000000000000000000000011111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 53) == 0b1111111111100000000000000000000000000000000111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 54) == 0b1111111111000000000000000000000000000000001111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 55) == 0b1111111110000000000000000000000000000000011111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 56) == 0b1111111100000000000000000000000000000000111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 57) == 0b1111111000000000000000000000000000000001111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 58) == 0b1111110000000000000000000000000000000011111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 59) == 0b1111100000000000000000000000000000000111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 60) == 0b1111000000000000000000000000000000001111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 61) == 0b1110000000000000000000000000000000011111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 62) == 0b1100000000000000000000000000000000111111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 63) == 0b1000000000000000000000000000000001111111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, 64) == 0b0000000000000000000000000000000011111111111111111111111111111111);
}

test "rotation to right for u64 bits" {
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -1) == 0b1000000000000000000000000000000001111111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -2) == 0b1100000000000000000000000000000000111111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -3) == 0b1110000000000000000000000000000000011111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -4) == 0b1111000000000000000000000000000000001111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -5) == 0b1111100000000000000000000000000000000111111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -6) == 0b1111110000000000000000000000000000000011111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -7) == 0b1111111000000000000000000000000000000001111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -8) == 0b1111111100000000000000000000000000000000111111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -9) == 0b1111111110000000000000000000000000000000011111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -10) == 0b1111111111000000000000000000000000000000001111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -11) == 0b1111111111100000000000000000000000000000000111111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -12) == 0b1111111111110000000000000000000000000000000011111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -13) == 0b1111111111111000000000000000000000000000000001111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -14) == 0b1111111111111100000000000000000000000000000000111111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -15) == 0b1111111111111110000000000000000000000000000000011111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -16) == 0b1111111111111111000000000000000000000000000000001111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -17) == 0b1111111111111111100000000000000000000000000000000111111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -18) == 0b1111111111111111110000000000000000000000000000000011111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -19) == 0b1111111111111111111000000000000000000000000000000001111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -20) == 0b1111111111111111111100000000000000000000000000000000111111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -21) == 0b1111111111111111111110000000000000000000000000000000011111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -22) == 0b1111111111111111111111000000000000000000000000000000001111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -23) == 0b1111111111111111111111100000000000000000000000000000000111111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -24) == 0b1111111111111111111111110000000000000000000000000000000011111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -25) == 0b1111111111111111111111111000000000000000000000000000000001111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -26) == 0b1111111111111111111111111100000000000000000000000000000000111111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -27) == 0b1111111111111111111111111110000000000000000000000000000000011111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -28) == 0b1111111111111111111111111111000000000000000000000000000000001111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -29) == 0b1111111111111111111111111111100000000000000000000000000000000111);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -30) == 0b1111111111111111111111111111110000000000000000000000000000000011);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -31) == 0b1111111111111111111111111111111000000000000000000000000000000001);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -32) == 0b1111111111111111111111111111111100000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -33) == 0b0111111111111111111111111111111110000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -34) == 0b0011111111111111111111111111111111000000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -35) == 0b0001111111111111111111111111111111100000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -36) == 0b0000111111111111111111111111111111110000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -37) == 0b0000011111111111111111111111111111111000000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -38) == 0b0000001111111111111111111111111111111100000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -39) == 0b0000000111111111111111111111111111111110000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -40) == 0b0000000011111111111111111111111111111111000000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -41) == 0b0000000001111111111111111111111111111111100000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -42) == 0b0000000000111111111111111111111111111111110000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -43) == 0b0000000000011111111111111111111111111111111000000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -44) == 0b0000000000001111111111111111111111111111111100000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -45) == 0b0000000000000111111111111111111111111111111110000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -46) == 0b0000000000000011111111111111111111111111111111000000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -47) == 0b0000000000000001111111111111111111111111111111100000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -48) == 0b0000000000000000111111111111111111111111111111110000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -49) == 0b0000000000000000011111111111111111111111111111111000000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -50) == 0b0000000000000000001111111111111111111111111111111100000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -51) == 0b0000000000000000000111111111111111111111111111111110000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -52) == 0b0000000000000000000011111111111111111111111111111111000000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -53) == 0b0000000000000000000001111111111111111111111111111111100000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -54) == 0b0000000000000000000000111111111111111111111111111111110000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -55) == 0b0000000000000000000000011111111111111111111111111111111000000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -56) == 0b0000000000000000000000001111111111111111111111111111111100000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -57) == 0b0000000000000000000000000111111111111111111111111111111110000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -58) == 0b0000000000000000000000000011111111111111111111111111111111000000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -59) == 0b0000000000000000000000000001111111111111111111111111111111100000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -60) == 0b0000000000000000000000000000111111111111111111111111111111110000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -61) == 0b0000000000000000000000000000011111111111111111111111111111111000);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -62) == 0b0000000000000000000000000000001111111111111111111111111111111100);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -63) == 0b0000000000000000000000000000000111111111111111111111111111111110);
    try testing.expect(rotateLeft64(0b0000000000000000000000000000000011111111111111111111111111111111, -64) == 0b0000000000000000000000000000000011111111111111111111111111111111);
}
